var CGVParse=function(){"use strict";return class{static seqToJSON(e,t={}){return this.parseSeqRecords(e,t)}static parseSeqRecords(e,t={}){const s=[];return e.split(/^\/\//m).filter(this.isSeqRecord).forEach((e=>{const t={inputType:"UNKNOWN"};/^\s*LOCUS|^\s*FEATURES/m.test(e)?t.inputType="genbank":/^\s*ID|^\s*SQ/m.test(e)&&(t.inputType="embl"),t.name=this.getSeqName(e),t.length=this.getSeqLength(e),t.sequence=this.getSequence(e),s.push(t)})),s}static isSeqRecord(e){return!/^\s*\/\s*$/.test(e)&&!/^\s*$/.test(e)}static getSeqName(e){const t=e.match(/^\s*(?:LOCUS|ID)\s*(\S+);?/);if(t){let e=t[1];return e=e.replace(/;$/,""),e}return""}static getSeqLength(e){const t=e.match(/^\s*(?:LOCUS|ID).*?(\d+)\s[Bb][Pp]/);if(t)return parseInt(t[1])}static getSequence(e){const t=e.match(/^(?:ORIGIN|SQ\s{3}).*?$([^\/]*)(^\s*$|^\s*LOCUS)?/ms);return t?this.removeDigits(this.removeWhiteSpace(t[1])):""}static removeWhiteSpace(e){return e.replace(/\s+/g,"")}static removeDigits(e){return e.replace(/\d+/g,"")}static removeNewlines(e){return e.replace(/[\n\r]+/g,"")}}}();
