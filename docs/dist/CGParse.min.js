var CGParse=function(){"use strict";class e{constructor(e={}){this.options=e,this.logToConsole=void 0===e.logToConsole||e.logToConsole,this.showTimestamps=void 0===e.showTimestamps||e.showTimestamps,this.showIcons=void 0!==e.showIcons&&e.showIcons,this.maxLogCount=void 0!==e.maxLogCount&&e.maxLogCount,this.logs=[]}get count(){return this.logs.length}log(e,t={}){this._log(e,"log",t)}info(e,t={}){this._log(e,"info",t)}warn(e,t={}){this._log(e,"warn",t)}error(e,t={}){this._log(e,"error",t)}break(e="\n"){const t={type:"break",break:e};this.logs.push(t)}history(e={}){let t="";for(const s of this.logs)"message"===s.type?t+=`${this._formatMessage(s,e)}\n`:"break"===s.type&&(t+=s.break);return t}_log(e,t,s={}){const n=this._formatTime(new Date);e=Array.isArray(e)?e:[e];const i=this._optionFor("maxLogCount",s);let r;for(const[o,a]of e.entries()){if(i&&o>=i&&o!==e.length-1){r=`${e[0].match(/^\s*/)[0]}- Only showing first ${i}: ${e.length-i} more not shown (${e.length.toLocaleString()} total)`}const c={type:"message",message:r||a,level:t,timestamp:n,icon:s.icon};if(this.logs.push(c),this._consoleMessage(c,s),r)break}}_consoleMessage(e,t={}){this._optionFor("logToConsole",t)&&console[e.level](this._formatMessage(e,t))}_formatMessage(e,t={}){let s="";if(this._optionFor("showIcons",t)){const t=e.icon||e.level;s+=this._icon(t)+""}return this._optionFor("showTimestamps",t)&&(s+=`[${e.timestamp}] `),s+=e.message,s}_formatTime(e){return e.toLocaleTimeString("en-US",{hour:"2-digit",minute:"2-digit",second:"2-digit",timeZone:"UTC",hour12:!1})}_icon(e){const t={log:"📝",info:"ℹ️",warn:"⚠️",error:"🛑",success:"✅",fail:"🛑",none:" "};return e?t[e]||e:t.none}_optionFor(e,t={}){return void 0!==t[e]?t[e]:this[e]}}function t(e){return e.replace(/\s+/g,"")}function s(e){return e.replace(/\d+/g,"")}function n(e){let t="";for(let s=e.length-1;s>=0;s--)t+=e[s];return t}function i(e){const t={A:"T",C:"G",G:"C",T:"A",U:"A",R:"Y",Y:"R",S:"S",W:"W",K:"M",M:"K",B:"V",D:"H",H:"D",V:"B",N:"N",a:"t",c:"g",g:"c",t:"a",u:"a",r:"y",y:"r",s:"s",w:"w",k:"m",m:"k",b:"v",d:"h",h:"d",v:"b",n:"n"};return e.split("").map((e=>t[e]||e)).join("")}function r(e){let t;const s=e.length;if(a(e,"ATGC")/s>.9)t="dna";else{t=a(e,"ACDEFGHIKLMNPQRSTVWY")/s>.9?"protein":"unknown"}return t}function o(e,t){const s=t.toLowerCase();let n;if("dna"===s){const t=e.replace(/[AGCTURYSWKMBDHVN\-\.]/gi,"");t.length>0&&(n=Array.from(new Set([...t])).join(","))}else if("protein"===s){const t=e.replace(/[ARNDCQEGHILKMFPOSUTWYVBZJ\-\.\*]/gi,"");t.length>0&&(n=Array.from(new Set([...t])).join(","))}return n}function a(e,t){const s=e.toUpperCase(),n=new Set(t.split(""));let i=0;for(let e=0,t=s.length;e<t;e++)n.has(s[e])&&i++;return i}class c{constructor(t,s={}){this.input=t,this.version="1.6.0",this.options=s,this.logger=s.logger||new e,s.maxLogCount&&(this.logger.maxLogCount=s.maxLogCount),this._success=!0,this._status="success",this.includeQualifiers=s.includeQualifiers||!1,this.includeCaption=void 0===s.includeCaption||s.includeCaption,this.defaultTypesToSkip=["gene","source","exon"],this.seqFile=this._parseInput(t),this.inputType=this.seqFile.inputType,this.sequenceType=this.seqFile.sequenceType,!0===this.seqFile.success?this._json=this._convert(this.seqFile.records):this._fail("*** Cannot convert to CGView JSON because parsing sequence file failed ***")}get success(){return"success"===this.status}get status(){return this._status}_fail(e){this.logger.error(e),this._status="fail"}_warn(e){this.logger.warn(e),this._status="warnings"}_parseInput(e){return"string"==typeof e?new u(e,{logger:this.logger}):e instanceof u?e:void this._fail("Invalid input: must be a string (from GenBank, EMBL, FASTA, Raw) or SequenceFile object")}_convert(e){if(this._skippedFeaturesByType={},this._skippedComplexFeatures=[],this.logger.info(`Date: ${(new Date).toUTCString()}`),this.logger.info("Converting to CGView JSON..."),this.logger.info(`- CGView JSON version ${this.version}`),this.logger.info(`- Input Sequence Count: ${e.length}`),this.logger.info(`- Input File Type: ${this.inputType||"Unknown"}`),this.logger.info(`- Input Sequence Type: ${this.sequenceType||"Unknown"}`),!e||e.length<1)return void this._fail("Conversion Failed: No sequence records provided");if("dna"!==this.sequenceType?.toLowerCase())return void this._fail(`Conversion Failed: Input type is not DNA: '${this.sequenceType}'`);let t=this._addConfigToJSON({},this.options.config);return t.version=this.version,this._adjustContigNames(e),t.captions=this._getCaptions(t,e),t.settings.format=c.determineFormat(e),t=this._extractSequenceAndFeatures(t,e),this._summarizeSkippedFeatures(),this._adjustFeatureGeneticCode(t),this._logQualifiers(),t.name=e[0]?.definition||e[0]?.name||e[0]?.seqID||"Untitled",t=this._removeUnusedLegends(t),t.tracks=this._buildTracks(t,this.inputType),this._convertSummary(t),{cgview:t}}_getCaptions(e,t){const s=e.captions?[...e.captions]:[];if(this.includeCaption){this.logger.info("- Adding caption...");const e={name:t[0]?.definition||t[0].seqID||"Untitled",textAlignment:"center",font:"sans-serif,plain,24",fontColor:"darkblue",position:"bottom-center"};s.push(e)}return s}_logQualifiers(){let e="none";!0===this.includeQualifiers?e="all":Array.isArray(this.includeQualifiers)&&(e=this.includeQualifiers.join(", ")),this.logger.info(`- Extracted Qualifiers: ${e} `)}_convertSummary(e){const t=e.sequence?.contigs||[],s=t.length||0,n=e.features?.length||0,i=e.tracks?.length||0,r=e.legend?.items?.length||0,o=t.map((e=>e.length)).reduce(((e,t)=>e+t),0);let a=Object.values(this._skippedFeaturesByType).reduce(((e,t)=>e+t),0);a+=this._skippedComplexFeatures.length,this.logger.break("--------------------------------------------\n"),this.logger.info("CGView JSON Summary:"),this.logger.info(`- Map Name: ${e.name.padStart(19)}`),this.logger.info(`- Contig Count: ${s.toLocaleString().padStart(15)}`),this.logger.info("- Total Length (bp): "+`${o.toLocaleString()}`.padStart(10)),this.logger.info(`- Track Count: ${i.toLocaleString().padStart(16)}`),this.logger.info(`- Legend Count: ${r.toLocaleString().padStart(15)}`),this.logger.info(`- Features Included: ${n.toLocaleString().padStart(10)}`),this.logger.info(`- Features Skipped: ${a.toLocaleString().padStart(11)}`),this.success?this.logger.info("- Status: "+"Success".padStart(21),{icon:"success"}):"warnings"===this.status?this.logger.warn("- Status: "+"Warnings".padStart(21),{icon:"warn"}):this.logger.error("- Status: "+"FAILED".padStart(21),{icon:"fail"}),this.logger.break("--------------------------------------------\n")}_summarizeSkippedFeatures(){const e=this._skippedFeaturesByType,t=Object.values(this._skippedFeaturesByType).reduce(((e,t)=>e+t),0);if(Object.keys(e).length>0){this.logger.info(`- Skipped features (${t}) by type:`);for(const[t,s]of Object.entries(e))this.logger.info(`  - ${t}: ${s.toLocaleString().padStart(15-t.length)}`)}const s=this._skippedComplexFeatures,n=s.length;if(n>0){this.logger.info(`- Skipped features (${n}) with complex locations:`);const e=s.map((e=>`  - ${e.type} '${e.name}': ${e.locationText}`));this.logger.info(e)}}_addConfigToJSON(e,t){const s=t?Object.keys(t):["none"];return this.logger.info(`- Config properties provided: ${s.join(", ")}`),e.settings=t&&t.settings?t.settings:{},e.backbone=t&&t.backbone?t.backbone:{},e.ruler=t&&t.ruler?t.ruler:{},e.dividers=t&&t.dividers?t.dividers:{},e.annotation=t&&t.annotation?t.annotation:{},e.sequence=t&&t.sequence?t.sequence:{},e.legend=t&&t.legend?t.legend:{},e.tracks=t&&t.tracks?t.tracks:[],e}_adjustContigNames(e){const t=e.map((e=>e.name)),s=c.adjustContigNames(t),n=s.names,i=s.reasons;this.logger.info("- Checking contig names...");const r=Object.keys(i);if(r.length>0){e.forEach(((e,t)=>{e.name=n[t]})),this._warn(`The following contig names (${r.length}) were adjusted:`),this._warn("Reasons: DUP (duplicate), LONG (>34), REPLACE (nonstandard characters)");const t=[];r.forEach((e=>{const s=i[e];t.push(`- [${s.index+1}] ${s.origName} -> ${s.newName} (${s.reason.join(", ")})`)})),this._warn(t)}}_adjustFeatureGeneticCode(e){const t=e.features;if(!t||t.length<1)return;const s=t.filter((e=>"CDS"===e.type));if(!s||s.length<1)return;const n=s.map((e=>e.geneticCode)),i={};n.forEach((e=>{i[e]=i[e]?i[e]+1:1}));let r=Object.keys(i).reduce(((e,t)=>i[e]>i[t]?e:t));this.logger.info(`- Most common genetic code (transl_table): ${r} (Count: ${i[r]}/${s.length} CDS features}`),Object.keys(i).length>1&&this._warn(`- Additional genetic codes found: ${Object.keys(i).join(", ")}`),e.settings.geneticCode=parseInt(r),e.features.forEach((e=>{"CDS"===e.type&&e.geneticCode===parseInt(r)&&delete e.geneticCode}))}static determineFormat(e=[]){return e.length>1?"circular":"linear"===e[0]?.topology?"linear":"circular"}static adjustContigNames(e=[]){const t={};let s=e.map((e=>e.replace(/[^a-zA-Z0-9\*\_\-]+/g,"_")));e.forEach(((e,n)=>{e!==s[n]&&(t[n]={index:n,origName:e,newName:s[n],reason:["REPLACE"]})})),s.forEach(((e,n)=>{e.length>34&&(s[n]=e.slice(0,34),t[n]?(t[n].newName=s[n],t[n].reason.push("LONG")):t[n]={index:n,origName:e,newName:s[n],reason:["LONG"]})}));const n=[];return s.forEach(((e,s)=>{const i=function(e,t){return t.includes(e)?function(e,t,s){let n;do{n=e+t,t++}while(s.indexOf(n)>-1);return n}(`${e}-`,2,t):e}(e,n);n.push(i),i!==e&&(t[s]?(t[s].newName=i,t[s].reason.push("DUP")):t[s]={index:s,origName:e,newName:i,reason:["DUP"]})})),{names:n,reasons:Object.values(t)}}_extractSequenceAndFeatures(e,t){const s=[],n=[];return this._skippedTypesSetup(),t.forEach((e=>{s.push({name:e.name,length:e.sequence.length,seq:e.sequence});const t=this._extractFeatures(e,e.name,e.inputType);n.push(...t)})),e.sequence={contigs:s},e.features=n,e}_skippedTypesSetup(){const e=this.options;!1===e.skipTypes?this.featuresToSkip=[]:Array.isArray(e.skipTypes)?this.featuresToSkip=e.skipTypes:this.featuresToSkip=this.defaultTypesToSkip;const t=0===this.featuresToSkip.length?"none":this.featuresToSkip.join(", ");this.logger.info(`- Feature types to skip: ${t}`)}_buildTracks(e,t){const s=e.tracks||[];return e.features&&e.features.length>0&&s.push({name:"Features",separateFeaturesBy:"strand",position:"both",dataType:"feature",dataMethod:"source",dataKeys:`${t}-features`}),s}_removeUnusedLegends(e){const t=e.legend?.items||[];if(0===t.length)return e;const s=e.features?.map((e=>e.legend))||[],n=[...new Set(s)],i=t.filter((e=>n.includes(e.name)));return e.legend.items=i,e}_extractFeatures(e,t,s){const n=[],i=s?`${s}-features`:"features";for(const s of e.features){if(this.featuresToSkip.includes(s.type)){this._skippedFeaturesByType[s.type]=this._skippedFeaturesByType[s.type]?this._skippedFeaturesByType[s.type]+1:1;continue}if(s.locations.length>1){this._skippedComplexFeatures.push(s);continue}const e={start:s.start,stop:s.stop,strand:s.strand,name:s.name,type:s.type,contig:t,source:i,legend:s.type};if(s.qualifiers&&s.qualifiers.codon_start&&1!==parseInt(s.qualifiers.codon_start[0])&&(e.codonStart=parseInt(s.qualifiers.codon_start[0])),"CDS"===e.type){const t=s.qualifiers&&s.qualifiers.transl_table&&parseInt(s.qualifiers.transl_table[0]);e.geneticCode=t||1}const r=c.extractQualifiers(s.qualifiers,this.includeQualifiers);r&&(e.qualifiers=r),n.push(e)}return n}static extractQualifiers(e,t){let s={};if(!0===t&&e?s=e:Array.isArray(t)&&t.forEach((t=>{void 0!==e[t]&&(s[t]=e[t])})),Object.keys(s).length>0)return s}toJSON(){return this._json}static fromSequenceText(t,s){const n=new e({logToConsole:!1,showIcons:!0}),i=new c(t,{logger:n,...s});return{json:i.toJSON(),log:i.logger.history()}}}class l{static toCGViewJSON(t,s={}){const n=new e({logToConsole:!1});return new l(t,{logger:n,...s}).toCGViewJSON()}constructor(t,s={}){this.inputText,this.logger=s.logger||new e,s.logger=this.logger,s.maxLogCount&&(this.logger.maxLogCount=s.maxLogCount),this.logger.info(`Date: ${(new Date).toUTCString()}`),this._success=!0,this._status="success",this._records=[],this._errorCodes=new Set,t&&""!==t?/^[\x00-\x7F]*$/.test(t)?(this._records=this._parse(t,s),s.addFeatureSequences&&this._addFeatureSequence(this._records),this._determineSequenceTypes(this._records),this._determineOverallInputAndSequenceType(this._records),this.logger.info("- done parsing sequence file"),this._validateRecords(this._records),this.parseSummary()):this._fail("Parsing Failed: Input contains non-text characters. Is this binary data?","binary"):this._fail("Parsing Failed: No input text provided.","empty"),this.logger.break()}get status(){return this._status}get success(){return"success"==this.status}get inputType(){return this._inputType}get sequenceType(){return this._sequenceType}get summary(){return this._summary}get errorCodes(){return Array.from(this._errorCodes)}toCGViewJSON(e={}){if(this.success){e.logger=e.logger||this.logger;return new c(this,e).toJSON()}this.logger.error("*** Cannot convert to CGView JSON because parsing failed ***")}get records(){return this._records}parseSummary(){const e=this.records,t=e.map((e=>e.features)).flat(),s=e.map((e=>e.length)).reduce(((e,t)=>e+t),0);this.logger.break("--------------------------------------------\n"),this.logger.info("Parsing Summary:"),this.logger.info(`- Input file type: ${this.inputType.padStart(12)}`),this.logger.info(`- Sequence Type: ${this.sequenceType.padStart(14)}`),this.logger.info(`- Sequence Count: ${e.length.toLocaleString().padStart(13)}`),this.logger.info(`- Feature Count: ${t.length.toLocaleString().padStart(14)}`),this.logger.info("- Total Length (bp): "+`${s.toLocaleString()}`.padStart(10)),this.success?this.logger.info("- Status: "+"Success".padStart(21),{icon:"success"}):this.logger.error("- Status: "+"FAILED".padStart(21),{icon:"fail"}),this.logger.break("--------------------------------------------\n"),this._summary={inputType:this.inputType,sequenceType:this.sequenceType,sequenceCount:e.length,featureCount:t.length,totalLength:s,status:this.status,success:this.success}}_parse(e,t={}){this.logger.info("Parsing sequence file...");let s=this._parseGenbankOrEmbl(e,t);return(0===s.length||""===s[0].name&&0===s[0].length&&""===s[0].sequence)&&(this.logger.info("- empty results"),/^\s*>/.test(e)?(this.logger.info("- attempting as FASTA..."),s=this._parseFasta(e,t)):(this.logger.info("- attempting as raw..."),s=this._parseRaw(e,t))),s}_parseGenbankOrEmbl(e,t={}){const s=[];return this.logger.info("- attempting as GenBank or EMBL..."),e.split(/^\/\//m).filter(this._isSeqRecord).forEach((e=>{const t={inputType:"unknown"};/^\s*LOCUS|^\s*FEATURES/m.test(e)?t.inputType="genbank":/^\s*ID|^\s*SQ/m.test(e)&&(t.inputType="embl"),t.name=this._getSeqName(e),t.seqID=this._getSeqID(e),t.definition=this._getSeqDefinition(e),t.length=this._getSeqLength(e),t.topology=this._getSeqTopology(e),t.comments=this._getSeqComments(e),t.sequence=this._getSequence(e),t.length||(t.length=t.sequence.length),t.features=this._getFeatures(e),s.push(t)})),s}_parseFasta(e,n={}){const i=[];return e.split(/^\s*>/m).filter(this._isSeqRecord).forEach((e=>{const n={inputType:"fasta",name:"",length:0,sequence:""},r=e.match(/^\s*([^\n\r]+)(.*)/s);if(r){n.name=r[1],n.sequence=t(s(r[2])),n.length=n.sequence.length,n.features=[];const e=n.name.match(/^(\S+)\s*(.*)/);e&&(n.seqID=e[1],n.definition=e[2])}i.push(n)})),i}_parseRaw(e,n={}){const i={inputType:"raw",name:"",features:[]};return i.sequence=t(s(e)),i.length=i.sequence.length,[i]}_isSeqRecord(e){return!/^\s*\/\/\s*$/.test(e)&&!/^\s*$/.test(e)}_getSeqName(e){const t=e.match(/^\s*(?:LOCUS|ID)\s*(\S+)/);if(t){let e=t[1];return e=e.replace(/;$/,""),e}return""}_getSeqID(e){let t=e.match(/^\s*(?:VERSION)\s*(\S+)/m);if(t){return t[1]}if(t=e.match(/^\s*AC\s*(\S+);/m),t){let s,n=t[1];return t=e.match(/^\s*ID\s*(\S+);\s*SV\s*(\d+);/),t&&(s=t[2]),s?`${n}.${s}`:n}return""}_getSeqDefinition(e){const t=e.match(/^\s*(?:DEFINITION|DE)\s+(.+)$/m);if(t){return t[1]}return""}_getSeqLength(e){const t=e.match(/^\s*(?:LOCUS|ID).*?(\d+)\s[Bb][Pp]/);return t?parseInt(t[1]):0}_getSeqTopology(e){const t=e.match(/^\s*(?:LOCUS|ID)\s*\S+\s+.*(linear|circular)/);return t?this.topology=t[1]:"unknown"}_getSeqComments(e){let t=e.match(/^\s*COMMENT\s+(.*)\nFEATURES/ms),s="";return t?(s=t[1],s=s.replace(/^\s*/gm,"")):(t=e.match(/^\s*CC\s+(.*)\nXX/ms),t&&(s=t[1],s=s.replace(/^\s*CC\s*/gm,""))),s}_getSequence(e){const n=e.match(/^(?:ORIGIN|SQ\s{3}).*?$([^\/]*)(^\s*$|^\s*LOCUS)?/m);return n?s(t(n[1])):""}_getFeatures(e){const t=[],s=e.match(/^(?:FEATURES.*?$|FH.*?^FH.*?$)(.*)^(?:ORIGIN|SQ\s{3}).*?$/ms);if(s){let e=s[1];e=e.replaceAll(/^FT/gm,"  "),e.split(/(?=^\s{5}\S+)/m).filter(this._isFeatureRecord).forEach((e=>{const s={};s.type=this._getFeatureType(e),s.strand=this._getFeatureStrand(e),s.locationText=this._getFeatureLocationText(e),s.locations=this._getFeatureLocations(s.locationText),s.start=s.locations.map((e=>e[0])).sort(((e,t)=>e-t))[0],s.stop=s.locations.map((e=>e[1])).sort(((e,t)=>t-e))[0],s.qualifiers=this._getFeatureQualifiers(e),s.name=this._getFeatureName(s.qualifiers),s.type&&t.push(s)}))}return t}_isFeatureRecord(e){return!/^\s*\/\s*$/.test(e)&&!/^\s*$/.test(e)}_getFeatureType(e){const t=e.match(/^\s{5}(\S+)/);return t?t[1]:null}_getFeatureStrand(e){return e.match(/^\s{5}\S+\s+complement/)?-1:1}_getFeatureLocationText(e){const s=e.match(/^\s{5}\S+\s+([^\/]+)/s);return s?t(s[1]):""}_getFeatureLocations(e){const t=[],s=e.split(/(?=,)/).filter(this._isParsableFeatureRange);for(const e of s){let s=e.match(/(\d+)\D*\.\.\D*(\d+)/);if(s){const e=parseInt(s[1]),n=parseInt(s[2]);t.push([e,n])}else if(s=e.match(/(\d+)/),s){const e=parseInt(s[1]),n=e;t.push([e,n])}}return t}_isParsableFeatureRange(e){return!/\d\.\d/.test(e)&&(!/\^/.test(e)&&(!/:/.test(e)&&!/^\s*$/.test(e)))}_isFeatureQualifier(e){return!/^\s*\/\s*$/.test(e)&&!/^\s*$/.test(e)}_formatFeatureQualifier(e){return/\S\s\S/.test(e)?e.replace(/[\s]+/g," "):e.replace(/[\s]+/g,"")}_getFeatureQualifiers(e){const s={};let n=e.match(/(\/.*)/s);if(n){n[1].split(/(?=^\s*\/)/m).filter(this._isFeatureQualifier).forEach((e=>{let i,r;n=e.match(/\/([^\"\s]+)\s*=\s*\"?([^\"]*)\"?(?=^\s*\/|$)/ms),n?(i=n[1],r=this._formatFeatureQualifier(n[2])):(i=t(e).replace(/^\//,""),r=!0),s[i]?s[i]instanceof Array?s[i].push(r):s[i]=[s[i],r]:s[i]=!0===r||r}))}return s}_getFirstQualifierValueForName(e,t){const s=t[e];return s instanceof Array?s[0]:void 0!==s?s:void 0}_getFeatureName(e){const t=["gene","locus_tag","product","note","db_xref"].find((t=>this._getFirstQualifierValueForName(t,e)));return t?this._getFirstQualifierValueForName(t,e):""}_addFeatureSequence(e){for(const t of e)for(const e of t.features){const s=[];for(const n of e.locations){const e=n[0],i=n[1];s.push(t.sequence.slice(e-1,i))}-1===e.strand?e.sequence=n(i(s.join(""))):e.sequence=s.join("")}}_determineSequenceTypes(e){for(const t of e){const e=t.sequence;t.type=r(e);const s=o(e,t.type);s&&(t.hasUnexpectedCharacters=s)}}_determineOverallInputAndSequenceType(e){const t=e.map((e=>e.inputType)),s=[...new Set(t)];this._inputType=s.length>1?"multiple":s[0];const n=e.map((e=>e.type)),i=[...new Set(n)];this._sequenceType=i.length>1?"multiple":i[0]}_fail(e,t="unknown"){this.logger.error(e),this._status="failed",this._errorCodes.add(t)}_validateRecords(e){if(this.logger.info("Validating..."),"multiple"===this.inputType){const t=e.map((e=>e.inputType)),s=[...new Set(t)];this._fail(`Input file contains multiple input types: ${s.join(", ")}`)}if("multiple"===this.sequenceType){const t=e.map((e=>e.type)),s=[...new Set(t)];this._fail(`Input file contains multiple sequence types: ${s.join(", ")}`)}"unknown"===this.sequenceType&&this._fail("Input file contains an unknown sequence type (i.e. not dna or protein).");const t=e.filter((e=>0===e.length));if(t.length>0){const e=t.length.toLocaleString();this._fail(`The following sequences (${e}) have zero length:`),this._fail(`- ${t.map((e=>e.name)).join(", ")}`)}const s=e.filter((e=>e.length!==e.sequence.length));if(s.length>0){const e=s.length.toLocaleString();this._fail(`The following sequences (${e}) have mismatched lengths (length attribute vs sequence length):`);const t=s.map((e=>`- ${e.name}: ${e.length.toLocaleString()} bp vs ${e.sequence.length.toLocaleString()} bp`));this.logger.error(t)}const n=e.filter((e=>e.hasUnexpectedCharacters));if(n.length>0){const e=n.length.toLocaleString();this._fail(`The following sequences (${e}) contain unexpected characters:`);const t=n.map((e=>`- ${e.name}: ${e.hasUnexpectedCharacters}`));this.logger.error(t)}const i=[],r=[];for(const t of e)for(const e of t.features)(e.start>t.length||e.stop>t.length)&&i.push(`- ${t.name} [${t.length.toLocaleString()} bp]: '${e.name}' [${e.start}..${e.stop}]`),e.start>e.stop&&r.push(`- ${t.name}: '${e.name}' [${e.start}..${e.stop}]`);if(i.length>0){const e=i.length.toLocaleString();this._fail(`The following features (${e}) have start or end greater than the sequence length:`),this.logger.error(i)}if(r.length>0){const e=r.length.toLocaleString();this._fail(`The following features (${e}) have a start greater than the end:`),this.logger.error(r)}this.success?this.logger.info("- validations passed",{icon:"success"}):this.logger.error("- validations failed",{icon:"fail"})}}var u=l;const g={};return g.Logger=e,g.SequenceFile=u,g.CGViewBuilder=c,g}();
